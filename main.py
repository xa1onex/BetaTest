import asyncio
import random
import sqlite3
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

API_TOKEN = "7392209320:AAET1DAtfR64VmeYe186oWR_DsUwhAEWtms"
PROVIDER_TOKEN = ""  # Telegram Stars

# ==================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ====================
bot = Bot(API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ==================== –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ====================
conn = sqlite3.connect("casino.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    balance INTEGER DEFAULT 100
)
""")
conn.commit()

def add_user(user_id: int):
    cursor.execute("INSERT OR IGNORE INTO users(user_id) VALUES (?)", (user_id,))
    conn.commit()

def get_balance(user_id: int) -> int:
    cursor.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    if row:
        return row[0]
    add_user(user_id)
    return 100

def update_balance(user_id: int, diff: int):
    bal = get_balance(user_id)
    cursor.execute("UPDATE users SET balance=? WHERE user_id=?", (bal + diff, user_id))
    conn.commit()

# ==================== –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã ====================
active_games = {}  # user_id -> {type, bet, turn, results}

# ==================== –ú–µ–Ω—é ====================
def main_menu(user_id: int):
    bal = get_balance(user_id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤", callback_data="game:dice"),
         InlineKeyboardButton(text="üé∞", callback_data="game:slots"),
         InlineKeyboardButton(text="üèÄ", callback_data="game:basket"),
         InlineKeyboardButton(text="‚öΩ", callback_data="game:football"),
         InlineKeyboardButton(text="üéØ", callback_data="game:dart")],
        [InlineKeyboardButton(text="üÜò –ü–æ–º–æ—â—å", callback_data="help"),
         InlineKeyboardButton(text="üíµ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", url="https://t.me/cloud_nnine")],
        [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")]
    ])
    text = (
        f"üéÆ –ò–≥—Ä—ã –Ω–∞ –∑–≤—ë–∑–¥—ã\n"
        f"–°—Ä–∞–∂–∞–π—Å—è —Å —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º 1 –Ω–∞ 1!\n\n"
        f"üé≤ –ö—É–±–∏–∫ ‚Äî –æ—Ç 1 –¥–æ 6 (–±–æ–ª—å—à–µ —á–∏—Å–ª–æ –ø–æ–±–µ–∂–¥–∞–µ—Ç)\n"
        f"üé∞ –°–ª–æ—Ç—ã ‚Äî 1-64 (64 = 777)\n"
        f"üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª ‚Äî 1-3 (3 = –ø–æ–ø–∞–¥–∞–Ω–∏–µ)\n"
        f"‚öΩ –§—É—Ç–±–æ–ª ‚Äî 1-5 (3 = –≥–æ–ª)\n"
        f"üéØ –î—Ä–æ—Ç–∏–∫ ‚Äî 1-6 (6 = bullseye)\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{bal}‚≠ê</b>\n"
    )
    return text, kb

back_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
])

deposit_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="50 ‚≠ê", callback_data="pay:50"),
     InlineKeyboardButton(text="100 ‚≠ê", callback_data="pay:100")],
    [InlineKeyboardButton(text="300 ‚≠ê", callback_data="pay:300"),
     InlineKeyboardButton(text="500 ‚≠ê", callback_data="pay:500")],
    [InlineKeyboardButton(text="1000 ‚≠ê", callback_data="pay:1000")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
])

# ==================== –°–æ—Å—Ç–æ—è–Ω–∏—è ====================
class PaymentStates(StatesGroup):
    choosing_amount = State()

# ==================== /start ====================
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    add_user(message.from_user.id)
    text, kb = main_menu(message.from_user.id)
    await message.answer(text, reply_markup=kb)

# ==================== –ü–æ–º–æ—â—å ====================
@dp.callback_query(F.data == "help")
async def process_help(callback: CallbackQuery):
    await callback.message.edit_text(
        "üìñ –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞...\n\n–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —á—Ç–æ —Ö–æ—á–µ—à—å.",
        reply_markup=back_kb
    )

# ==================== –ù–∞–∑–∞–¥ ====================
@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    text, kb = main_menu(callback.from_user.id)
    await callback.message.edit_text(text, reply_markup=kb)

# ==================== –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ====================
@dp.callback_query(F.data == "deposit")
async def process_deposit(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PaymentStates.choosing_amount)
    await callback.message.edit_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=deposit_kb)

@dp.callback_query(PaymentStates.choosing_amount, F.data.startswith("pay:"))
async def process_payment(callback: CallbackQuery, state: FSMContext):
    amount_stars = int(callback.data.split(":")[1])
    payload = f"deposit:{callback.from_user.id}:{amount_stars}"

    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
        description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount_stars}‚≠ê",
        provider_token="",
        currency="XTR",
        prices=[LabeledPrice(label=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amount_stars}‚≠ê", amount=amount_stars * 1000)],  # *1000 –¥–ª—è Stars
        payload=payload,
        start_parameter=f'deposit_{callback.from_user.id}_{amount_stars}',
        need_name=False,
        need_phone_number=False
    )
    await state.clear()

# ==================== –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ ====================
@dp.message(F.successful_payment)
async def process_successful_payment(message: Message):
    payment = message.successful_payment
    payload = payment.invoice_payload
    if payload.startswith("deposit:"):
        _, user_id, amount_str = payload.split(":")
        user_id = int(user_id)
        amount = int(amount_str)
        update_balance(user_id, amount)
        await message.answer(
            f"‚úÖ –ü–ª–∞—Ç—ë–∂ –Ω–∞ {amount}‚≠ê —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!\n"
            f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(user_id)}‚≠ê"
        )

# ==================== –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã ====================
@dp.callback_query(F.data.startswith("game:"))
async def choose_game(callback: CallbackQuery, from_retry: bool = False):
    user_id = callback.from_user.id
    game_type = callback.data.split(":")[1]
    bet = 10
    balance = get_balance(user_id)

    if balance < bet:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è —Å—Ç–∞–≤–∫–∏!", show_alert=True)
        return

    update_balance(user_id, -bet)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É
    turn = random.choice(["user", "bot"])
    active_games[user_id] = {"type": game_type, "bet": bet, "turn": turn, "results": {}}

    # –∏–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
    if not from_retry:
        await callback.message.answer("‚è≥ –ò—â–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...")
        await asyncio.sleep(2)
        await callback.message.answer("üéÆ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!")
    else:
        await bot.send_message(user_id, "üîÅ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!")

    if turn == "user":
        await bot.send_message(user_id, f"üëâ –¢–≤–æ–π —Ö–æ–¥! –ö–∏–¥–∞–π {game_type} ({emoji_for(game_type)})")
    else:
        await bot.send_message(user_id, "ü§ñ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º...")
        await asyncio.sleep(2)
        opp_msg = await bot.send_dice(user_id, emoji=emoji_for(game_type))
        active_games[user_id]["results"]["bot"] = opp_msg.dice.value
        active_games[user_id]["turn"] = "user"
        await bot.send_message(user_id, f"üëâ –¢–≤–æ–π —Ö–æ–¥! –ö–∏–¥–∞–π {game_type} ({emoji_for(game_type)})")



# ==================== –•–æ–¥—ã ====================
@dp.message(F.dice)
async def handle_dice(message: Message):
    user_id = message.from_user.id
    if user_id not in active_games:
        return

    game = active_games[user_id]
    if game["turn"] != "user":
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä–æ–∫–∞
    game["results"]["user"] = message.dice.value

    # –µ—Å–ª–∏ –±–æ—Ç –µ—â—ë –Ω–µ —Ö–æ–¥–∏–ª ‚Üí —Ö–æ–¥–∏—Ç
    if "bot" not in game["results"]:
        await asyncio.sleep(2)
        bot_msg = await bot.send_dice(user_id, emoji=emoji_for(game["type"]))
        game["results"]["bot"] = bot_msg.dice.value

    # –ø–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    await asyncio.sleep(1)
    await finish_game(user_id)

async def finish_game(user_id: int):
    game = active_games[user_id]
    bet = game["bet"]
    res = game["results"]
    bank = bet * 2

    if res["user"] > res["bot"]:
        update_balance(user_id, bank)
        text = f"üèÜ –¢—ã –≤—ã–∏–≥—Ä–∞–ª! +{bet}‚≠ê\nüí∞ –ë–∞–ª–∞–Ω—Å: {get_balance(user_id)}‚≠ê"
    elif res["user"] < res["bot"]:
        text = f"üíÄ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! -{bet}‚≠ê\nüí∞ –ë–∞–ª–∞–Ω—Å: {get_balance(user_id)}‚≠ê"
    else:
        update_balance(user_id, bet)
        text = "ü§ù –ù–∏—á—å—è! –ë–∞–ª–∞–Ω—Å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"retry:{game['type']}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

    await bot.send_message(user_id, text, reply_markup=kb)
    del active_games[user_id]

# ==================== –ü–æ–≤—Ç–æ—Ä –∏–≥—Ä—ã ====================
@dp.callback_query(F.data.startswith("retry:"))
async def retry_game(callback: CallbackQuery):
    game_type = callback.data.split(":")[1]
    # –≤—ã–∑—ã–≤–∞–µ–º choose_game, –Ω–æ –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä
    fake_callback = CallbackQuery(
        id=callback.id,
        from_user=callback.from_user,
        chat_instance=callback.chat_instance,
        data=f"game:{game_type}",
        message=None  # —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑ message
    )
    await choose_game(fake_callback, from_retry=True)

# ==================== –£—Ç–∏–ª–∏—Ç—ã ====================
def emoji_for(game_type: str) -> str:
    return {
        "dice": "üé≤",
        "slots": "üé∞",
        "basket": "üèÄ",
        "football": "‚öΩ",
        "dart": "üéØ"
    }[game_type]

# ==================== –ó–∞–ø—É—Å–∫ ====================
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))